// Code generated by go-bindata.
// sources:
// containers/versions.json
// DO NOT EDIT!

package versiondata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _containersVersionsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x93\xdd\x6e\xdb\x30\x0c\x85\xef\xfb\x14\x45\xae\x67\x40\xa2\x7e\x28\xed\x6d\x48\x8a\x4a\x53\x24\x71\x66\x27\xdd\x86\x61\xef\x3e\xc5\x76\xdb\xac\x75\x7a\x67\x18\xe7\xd3\x21\x0f\xc9\x3f\x0f\x8f\x8f\x1b\xe9\x0f\xa7\xdd\x5e\x87\xb1\x1b\x2e\x87\x53\xb7\xed\xbb\x5f\x7a\xdc\x7c\x7f\xdc\x04\x2c\x50\x93\xc5\x52\x28\xc7\x92\x79\xf3\x6d\x5d\xfe\xf4\xf3\xaa\xa6\x0c\xd5\x13\x05\x47\xde\x7a\xe6\xba\xaa\x3e\xf6\x45\x9f\xc7\x46\xb4\xaf\x6e\x3c\x5f\xf8\x4a\x32\x29\x57\x8d\xa9\x3a\x48\xce\x66\xb3\x4a\xca\x6b\x55\xb5\x8a\x3a\xe4\x9c\x0b\x17\x8e\x18\x57\xd5\x4c\xa3\xbe\x01\x5a\x25\x71\x2e\x11\xaa\x49\xe1\xce\xf3\x6f\x85\x4d\x05\x05\x03\xb9\x14\x91\x84\xce\x12\x84\x99\x78\x19\x4f\x4f\x3a\x68\x27\xfb\x9d\x1e\xcf\x73\xcb\xc1\x25\x41\x01\x0f\x24\xac\x4b\xcb\xbb\x03\x6d\x9b\x6a\x50\x3a\xf7\xc3\x24\x83\xe2\xc0\x23\x96\xea\x93\x49\xaa\xb3\x8c\xfb\xfe\x7c\xab\x12\x6f\x02\x19\x0c\xce\x47\x71\x29\x7e\x59\xe6\xd2\x19\x54\x16\xef\x11\x82\x63\xb2\x99\xd3\x2a\x72\xfa\x7d\x7e\xea\x8f\x6e\x69\x0d\x80\x25\x38\x4c\x54\xa3\x9a\x96\xe1\x47\xe4\xb0\x1b\xae\xd5\xf7\x42\x87\xfd\xab\x8d\x91\xe2\x63\x0d\xcd\x46\xa2\x50\xa2\x55\x9b\x67\x7a\xa1\xc5\x43\x5b\x26\x58\x24\x20\x32\xa4\x54\xf2\x7d\xfd\x62\xe0\x9d\x8b\x21\x7b\x43\xa6\x94\x68\x8d\x7c\x04\x76\x47\xd9\x5f\x8a\xf6\x63\x27\xa7\xd3\x62\x62\xad\x89\x18\x08\x53\x9b\x13\x46\xff\xa9\xf7\xff\x99\xf6\xff\xd0\xcf\xdb\xc0\xae\x42\xa4\x80\x5a\x8d\x35\x75\xbd\xb8\x69\x7d\xde\x19\x28\x68\x43\x5b\x4e\xaa\xde\xd8\x50\xed\xcc\x4c\xca\xa2\x7c\xd9\x6e\x75\xe8\x7e\xe8\xe1\x32\xf5\x92\xab\xc5\x1c\x19\x73\xf5\x11\x8c\xbb\x7f\x34\xb7\x27\x50\x92\x04\x43\x9a\x53\x9b\xbf\x95\x78\xf7\xd4\x5a\x60\xb7\x58\x95\x92\x62\x42\x8a\x31\x70\x00\x5c\x9f\xcc\xfb\x02\xdc\xa2\xc9\x92\xcf\x9e\x44\xb2\x2f\x98\x00\xbf\x44\x97\x39\x61\x30\x96\x14\x6b\x04\xf2\x50\xe3\xba\x9d\xbc\x0e\x28\x07\x5f\x44\x31\xab\x37\x88\xe0\xef\x07\x3d\xeb\x9d\x1a\x6d\xd7\xd6\x8e\x89\x29\xb6\x14\x67\xfd\x35\xd6\xee\x72\xde\xed\xaf\x92\xb6\x84\x19\x20\x44\xcb\xcc\x29\xea\xa7\x6c\xfb\xf1\x65\xda\xab\xc9\xde\x57\xb0\xc9\x69\x10\x6e\x7d\x26\xd8\x3c\xfc\x7d\xf8\x17\x00\x00\xff\xff\x3a\xbf\x83\x5c\xef\x04\x00\x00")

func containersVersionsJsonBytes() ([]byte, error) {
	return bindataRead(
		_containersVersionsJson,
		"containers/versions.json",
	)
}

func containersVersionsJson() (*asset, error) {
	bytes, err := containersVersionsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "containers/versions.json", size: 1263, mode: os.FileMode(420), modTime: time.Unix(1475613250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"containers/versions.json": containersVersionsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"containers": &bintree{nil, map[string]*bintree{
		"versions.json": &bintree{containersVersionsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
