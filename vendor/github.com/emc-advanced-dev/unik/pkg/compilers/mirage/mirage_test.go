package mirage

import (
	"io"
	"os"
	"path/filepath"

	"github.com/docker/docker/pkg/ioutils"
	. "github.com/onsi/ginkgo"

	. "github.com/onsi/gomega"

	"strings"
)

var xlFile = `
# Generated by www (Tue, 23 Aug 2016 19:44:16 GMT).

name = '@NAME@'
kernel = '@KERNEL@'
builder = 'linux'
memory = @MEMORY@
on_crash = 'preserve'

disk = [ 'format=raw, vdev=xvdb, access=rw, target=@BLOCK:tar_block1.img@', 'format=raw, vdev=xvdc, access=rw, target=@BLOCK:fat_block1.img@' ]

# if your system uses openvswitch then either edit /etc/xen/xl.conf and set
#     vif.default.script="vif-openvswitch"
# or add "script=vif-openvswitch," before the "bridge=" below:
vif = [ 'bridge=@NETWORK:tap0@' ]
`

var mirageDescribe = `
Name       www
Root       /home/opam/mirage-skeleton/static_website
Keys       dhcp=false (default), gateways=10.0.0.1 (default), interfaces=0.0.0.0 (default), ip=10.0.0.2 (default),
  kv_ro=crunch (default), logs= (default), net=direct (default), netmask=255.255.255.0 (default), network=tap0 (default),
  ocaml_version_check=false, port=8080 (default), socket= (default), target=unix (default), unix=false, warn_error=false (default),
  xen=false
  
`

var _ = Describe("Mirage", func() {
	var sourcesDir string
	var reader io.Reader
	BeforeEach(func() {
		sourcesDir, _ = ioutils.TempDir("", "")
		reader = strings.NewReader(xlFile)

	})
	AfterEach(func() {
		os.RemoveAll(sourcesDir)
		sourcesDir = ""
	})

	Describe("Reading XL file", func() {
		It("should get correct matches", func() {
			matches, err := getDiskMatchesFromReader(reader)

			Expect(err).NotTo(HaveOccurred())
			Expect(len(matches)).To(Equal(2))
			Expect(matches[0][1]).To(Equal("xvdb"))
			Expect(matches[0][2]).To(Equal("tar_block1.img"))
			Expect(matches[1][1]).To(Equal("xvdc"))
			Expect(matches[1][2]).To(Equal("fat_block1.img"))
		})
		It("should get correct disks where no volumes exist", func() {
			matches, err := getDisksFromReader(sourcesDir, reader)

			Expect(err).NotTo(HaveOccurred())
			Expect(len(matches)).To(Equal(0))
		})
		It("should get correct disks with fat", func() {

			f, _ := os.Create(filepath.Join(sourcesDir, "fat_block1.img"))
			f.Close()

			matches, err := getDisksFromReader(sourcesDir, reader)

			Expect(err).NotTo(HaveOccurred())
			Expect(len(matches)).To(Equal(1))
			Expect(matches[0]).To(Equal("xvdc"))
		})
		It("should get correct disks with tar", func() {

			f, _ := os.Create(filepath.Join(sourcesDir, "tar_block1.img"))
			f.Close()

			matches, err := getDisksFromReader(sourcesDir, reader)

			Expect(err).NotTo(HaveOccurred())
			Expect(len(matches)).To(Equal(1))
			Expect(matches[0]).To(Equal("xvdb"))
		})
	})

	Describe("Reading mirage describe", func() {
		It("should non zero keys section", func() {
			res := getKeyStringFromDescribe(mirageDescribe)
			Expect(len(res)).NotTo(Equal(0))
		})
		It("should getall keys", func() {
			res := getKeys(getKeyStringFromDescribe(mirageDescribe))
			Expect(len(res)).To(Equal(16))
		})
		It("should get kv_ro key", func() {
			res := getKeys(getKeyStringFromDescribe(mirageDescribe))
			Expect(len(res)).NotTo(Equal(0))
			Expect(res).To(HaveKey("kv_ro"))
			Expect(res["kv_ro"]).To(Equal("crunch (default)"))
		})
	})
	Describe("Packaging raw image", func() {
		It("should find unikernel file", func() {

			f, _ := os.Create(filepath.Join(sourcesDir, "file.xen"))
			f.Close()

			res, err := getUnikernelFile(sourcesDir)
			Expect(err).NotTo(HaveOccurred())
			Expect(res).To(Equal(filepath.Join(sourcesDir, "file.xen")))
		})
	})
})
